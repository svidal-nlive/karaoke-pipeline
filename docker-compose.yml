# version: "3.9"
---
services:

  watcher:
    build:
      context: .
      dockerfile: watcher/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_watcher
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - input:/input
      - queue:/queue
      - logs:/logs
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

  metadata:
    build:
      context: .
      dockerfile: metadata/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_metadata
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - queue:/queue
      - metadata:/metadata
      - logs:/logs
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

  splitter:
    build:
      context: .
      dockerfile: splitter/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_splitter
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - CHUNKING_ENABLED=${CHUNKING_ENABLED}
      - CHUNK_LENGTH_MS=${CHUNK_LENGTH_MS}
      - SPLITTER_TYPE=${SPLITTER_TYPE}
      - STEMS=${STEMS}
      - STEM_TYPE=${STEM_TYPE}
    volumes:
      - queue:/queue
      - stems:/stems
      - logs:/logs
      - ./temp_chunks:/tmp
      - ./models:/app/pretrained_models
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

  packager:
    build:
      context: .
      dockerfile: packager/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_packager
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - stems:/stems
      - metadata:/metadata
      - output:/output
      - logs:/logs
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

  organizer:
    build:
      context: .
      dockerfile: organizer/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_organizer
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - output:/output
      - organized:/organized
      - metadata:/metadata
      - logs:/logs
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

  status-api:
    build:
      context: .
      dockerfile: status-api/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
    container_name: ${STACK_PREFIX}_status
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ./test-assets:/test-assets:rw
      - input:/input
      - queue:/queue
      - metadata:/metadata
      - output:/output
      - organized:/organized
      - logs:/logs
    networks:
      - backend
    depends_on:
      volume-init:
        condition: service_completed_successfully

volumes:
  input:
    external: true
  queue:
    external: true
  stems:
    external: true
  output:
    external: true
  organized:
    external: true
  metadata:
    external: true
  logs:
    external: true

networks:
  backend:
    name: ${BACKEND_NETWORK}
