# Root-level docker-compose.yml for Karaoke Pipeline
# Default: named volumes for pipeline-data

# version: "3.9"
---
services:
  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks: [backend]

  volume-init:
    build:
      context: ./volume-init
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "0:0"
    command: []
    volumes:
      - input:/input
      - queue:/queue
      - logs:/logs
      - metadata:/metadata
      - output:/output
      - organized:/organized
      - stems:/stems
    networks: [backend]
    restart: "no"

  watcher:
    build:
      context: ./watcher
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      LOG_LEVEL: ${LOG_LEVEL}
    volumes:
      - input:/input
      - queue:/queue
      - logs:/logs
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  metadata:
    build:
      context: ./metadata
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - queue:/queue
      - metadata:/metadata
      - logs:/logs
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  splitter:
    build:
      context: ./splitter
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      CHUNKING_ENABLED: ${CHUNKING_ENABLED}
      CHUNK_LENGTH_MS: ${CHUNK_LENGTH_MS}
      SPLITTER_TYPE: ${SPLITTER_TYPE}
      STEMS: ${STEMS}
      STEM_TYPE: ${STEM_TYPE}
    volumes:
      - queue:/queue
      - stems:/stems
      - logs:/logs
      - ./temp_chunks:/tmp
      - ./models:/app/pretrained_models
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  packager:
    build:
      context: ./packager
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      STEMS_DIR: /stems
      PACKAGED_DIR: /output
#      MAX_RETRIES: ${MAX_RETRIES}
#      RETRY_DELAY: ${RETRY_DELAY}
    volumes:
      - stems:/stems
      - metadata:/metadata
      - output:/output
      - logs:/logs
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  organizer:
    build: 
      context: ./organizer
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - output:/output
      - organized:/organized
      - metadata:/metadata
      - logs:/logs
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  status-api:
    build:
      context: ./status-api
      args:
        PUID: ${PUID}
        PGID: ${PGID}
    user: "${PUID}:${PGID}"
    ports:
      - "5001:5001"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - input:/input
      - queue:/queue
      - metadata:/metadata
      - output:/output
      - organized:/organized
      - logs:/logs
    depends_on:
      volume-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks: [backend]

  dashboard:
    build: ./dashboard/karaoke-pipeline-dashboard
    ports:
      - "3001:80"
    environment:
      - REACT_APP_STATUS_API_URL=https://kapi.vectorhost.net
    depends_on:
      - status-api
    networks: [backend]

volumes:
  input:
  queue:
  stems:
  output:
  organized:
  metadata:
  logs:
  redis_data:

networks:
  backend:
    driver: bridge
